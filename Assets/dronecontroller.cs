//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/dronecontroller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Dronecontroller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Dronecontroller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""dronecontroller"",
    ""maps"": [
        {
            ""name"": ""drone"",
            ""id"": ""5b437921-d755-405b-a2cb-5e9b94541720"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""15314df1-2fd6-4ce7-9045-fe75362e09b9"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Lift"",
                    ""type"": ""Button"",
                    ""id"": ""424a29ea-5ade-4005-a990-7c5d4496b9cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""192fd88a-93dd-40d8-99ab-53c6acda3267"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""headmovement"",
                    ""type"": ""Value"",
                    ""id"": ""9d8b950f-fa47-48ed-8c7e-b071f667f59a"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a073c246-07dc-4453-8a95-c21555ba0133"",
                    ""path"": ""<OculusTouchController>{LeftHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""785cb42c-c54c-48f8-89f2-87a14ef7bf7f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc596cc0-16e4-426a-9439-7efdac34a379"",
                    ""path"": ""<OculusTouchController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa618a3a-89df-4105-b4cd-01023c54f879"",
                    ""path"": ""<OculusTouchController>{RightHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c283f48-b283-4247-a71d-7b68ca4b6558"",
                    ""path"": ""<XRHMD>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""headmovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""vrcontrolscheme"",
            ""bindingGroup"": ""vrcontrolscheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRHMD>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // drone
        m_drone = asset.FindActionMap("drone", throwIfNotFound: true);
        m_drone_Move = m_drone.FindAction("Move", throwIfNotFound: true);
        m_drone_Lift = m_drone.FindAction("Lift", throwIfNotFound: true);
        m_drone_Rotate = m_drone.FindAction("Rotate", throwIfNotFound: true);
        m_drone_headmovement = m_drone.FindAction("headmovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // drone
    private readonly InputActionMap m_drone;
    private List<IDroneActions> m_DroneActionsCallbackInterfaces = new List<IDroneActions>();
    private readonly InputAction m_drone_Move;
    private readonly InputAction m_drone_Lift;
    private readonly InputAction m_drone_Rotate;
    private readonly InputAction m_drone_headmovement;
    public struct DroneActions
    {
        private @Dronecontroller m_Wrapper;
        public DroneActions(@Dronecontroller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_drone_Move;
        public InputAction @Lift => m_Wrapper.m_drone_Lift;
        public InputAction @Rotate => m_Wrapper.m_drone_Rotate;
        public InputAction @headmovement => m_Wrapper.m_drone_headmovement;
        public InputActionMap Get() { return m_Wrapper.m_drone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneActions set) { return set.Get(); }
        public void AddCallbacks(IDroneActions instance)
        {
            if (instance == null || m_Wrapper.m_DroneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DroneActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Lift.started += instance.OnLift;
            @Lift.performed += instance.OnLift;
            @Lift.canceled += instance.OnLift;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @headmovement.started += instance.OnHeadmovement;
            @headmovement.performed += instance.OnHeadmovement;
            @headmovement.canceled += instance.OnHeadmovement;
        }

        private void UnregisterCallbacks(IDroneActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Lift.started -= instance.OnLift;
            @Lift.performed -= instance.OnLift;
            @Lift.canceled -= instance.OnLift;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @headmovement.started -= instance.OnHeadmovement;
            @headmovement.performed -= instance.OnHeadmovement;
            @headmovement.canceled -= instance.OnHeadmovement;
        }

        public void RemoveCallbacks(IDroneActions instance)
        {
            if (m_Wrapper.m_DroneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDroneActions instance)
        {
            foreach (var item in m_Wrapper.m_DroneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DroneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DroneActions @drone => new DroneActions(this);
    private int m_vrcontrolschemeSchemeIndex = -1;
    public InputControlScheme vrcontrolschemeScheme
    {
        get
        {
            if (m_vrcontrolschemeSchemeIndex == -1) m_vrcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("vrcontrolscheme");
            return asset.controlSchemes[m_vrcontrolschemeSchemeIndex];
        }
    }
    public interface IDroneActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLift(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnHeadmovement(InputAction.CallbackContext context);
    }
}
